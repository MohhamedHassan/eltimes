{"version":3,"sources":["./src/app/screens/dashboard/validators/emptyInput.ts","./src/app/screens/article-details/services/comments.service.ts","./src/app/screens/dashboard/services/live.service.ts","./src/app/screens/dashboard/services/add-question.service.ts"],"names":[],"mappings":";;;;;;;;;;AAEA;AAAA;AAAO,SAAS,YAAY,CAAC,OAAuB;IAClD,IAAG,OAAO,CAAC,KAAK,EAAE;QACd,IAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,IAAE,EAAE;YAAE,OAAO,EAAC,cAAc,EAAC,IAAI,EAAC;KAC3D;IACD,OAAO,IAAI;AACd,CAAC;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAAA;AAA2D;;;AAKpD,MAAM,eAAe;IAE1B,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAI,CAAC;IACxC,UAAU,CAAC,KAAK;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,wEAAW,CAAC,MAAM,SAAS,EAAC,KAAK,CAAC;IAC7D,CAAC;IACD,aAAa,CAAC,EAAE;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,wEAAW,CAAC,MAAM,WAAW,EAAE,EAAE,CAAC;IAC/D,CAAC;IACD,WAAW,CAAC,IAAI;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,wEAAW,CAAC,MAAM,SAAS,EAAC,EAAC,MAAM,EAAC,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,EAAC,CAAC;IACnF,CAAC;;8EAXU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;;;;;;;;;;;;;ACHpB;AAAA;AAAA;AAAA;AAAA;AAA2D;;;AAKpD,MAAM,WAAW;IAEtB,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAI,CAAC;IACxC,OAAO,CAAC,KAAK;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,wEAAW,CAAC,MAAM,MAAM,EAAC,KAAK,CAAC;IAC1D,CAAC;IACD,UAAU,CAAC,EAAE;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,wEAAW,CAAC,MAAM,QAAQ,EAAE,EAAE,CAAC;IAC5D,CAAC;IACD,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,wEAAW,CAAC,MAAM,MAAM,CAAC;IACnD,CAAC;;sEAXU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;;;;;;;;;;;;;ACHpB;AAAA;AAAA;AAAA;AAAA;AAA2D;;;AAKpD,MAAM,kBAAkB;IAE7B,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAI,CAAC;IACxC,WAAW,CAAC,KAAK;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,wEAAW,CAAC,MAAM,UAAU,EAAC,KAAK,CAAC;IAC9D,CAAC;IACD,SAAS,CAAC,KAAK;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,wEAAW,CAAC,MAAM,QAAQ,EAAC,KAAK,CAAC;IAC5D,CAAC;IACD,mBAAmB,CAAC,EAAE;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,wEAAW,CAAC,MAAM,cAAc,EAAC,EAAC,MAAM,EAAC,EAAC,EAAE,EAAC,EAAC,CAAC;IACzE,CAAC;IACD,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,wEAAW,CAAC,MAAM,sBAAsB,CAAC;IACnE,CAAC;IACD,cAAc,CAAC,EAAE;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,wEAAW,CAAC,MAAM,YAAY,EAAE,EAAE,CAAC;IAChE,CAAC;;oFAjBU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM","file":"common.js","sourcesContent":["import { AbstractControl } from \"@angular/forms\";\r\n\r\nexport function emptyContent(control:AbstractControl) {\r\n  if(control.value) {\r\n      if(control.value.trim()=='') return {invalidContetn:true}\r\n   }\r\n   return null\r\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n\n  constructor(private http:HttpClient) { }\n  addComment(value) {\n    return this.http.post(`${environment.apiUrl}comment`,value)\n  }\n  deleteComment(id) {\n    return this.http.delete(`${environment.apiUrl}comment/${id}`)\n  }\n  getComments(post) {\n    return this.http.get(`${environment.apiUrl}comment`,{params:{post,limit:'1000'}})\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LiveService {\n\n  constructor(private http:HttpClient) { }\n  addLive(value) {\n    return this.http.post(`${environment.apiUrl}live`,value)\n  }\n  deleteLive(id) {\n    return this.http.delete(`${environment.apiUrl}live/${id}`)\n  }\n  getLive() {\n    return this.http.get(`${environment.apiUrl}live`)\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddQuestionService {\n\n  constructor(private http:HttpClient) { }\n  addQuestion(value) {\n    return this.http.post(`${environment.apiUrl}question`,value)\n  }\n  addAnswer(value) {\n    return this.http.post(`${environment.apiUrl}review`,value)\n  }\n  getResultOfQuestion(id) {\n    return this.http.get(`${environment.apiUrl}apis/Answers`,{params:{id}})\n  }\n  getQuestions() {\n    return this.http.get(`${environment.apiUrl}question?limit=10000`)\n  }\n  deleteQuestion(id) {\n    return this.http.delete(`${environment.apiUrl}question/${id}`)\n  }\n}\n"],"sourceRoot":"webpack:///"}